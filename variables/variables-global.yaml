variables:


# Static Variables
#=========================================================

  # Angular 
  angularWorkingDir:            'src/Content/Presentation/Presentation.WebUI'
  angularBuildOutputFolder:     'src/Content/Presentation/Presentation.WebUI/dist/my-app'
  angularArtifactName:          'angularApp'
  nodeJSVersion:                '15.x'

  # Dot Net CLI
  solution:                     '**/*.sln'
  webAPIProjects:               "| \n **/Presentation.WebApi.csproj"
  webAPIArtifactName:           webAPIApp
  functionAPIProjects:          "| \n **/Presentation.FunctionApi.csproj"
  functionAPIArtifactName:      functionAPIApp
  buildableProjects:            "| \n **/Application/*.csproj \n **/Domain/*.csproj \n **/Infrastructure/*.csproj \n **/Presentation/*.csproj"
  armTemplateProjectFolder:     '**/Deployment.ArmTemplate'
  armTemplateArtifactName:      armTemplates

  # Pipeline conditions
  isMain:                       ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  isProduction:                 ${{ eq(variables['Build.SourceBranch'], 'refs/heads/production') }}
  isTag:                        ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/v') }}
  isFork:                       ${{ eq(variables['System.PullRequest.IsFork'], 'True') }}
  isPR:                         ${{ eq(variables['Build.Reason'], 'PullRequest') }}
  isScheduled:                  ${{ eq(variables['Build.Reason'], 'Schedule') }}
  isTrustedCI:                  ${{ and( eq(variables.isFork,'False'), eq(variables.isPR,'False'), eq(variables.isScheduled,'False') ) }}
  deployMain:                   ${{ and( eq(variables.isMain,'True'), eq(variables.isTrustedCI,'True') ) }}
  hasTests:                     ${{ ne(variables.dotNetTestProject, '') }}

# Dynamic Environment Variables
#=========================================================
  # General
  environment:                        Development
  deploymentLocation:                 eastus    

  # ARM Template
  resourceGroup:                      rg-webapp-dev-001

  # Storage Account
  storageAccountName:                 staticweb  
  storageAccountCSMFilePath:          storageaccountdeploy.json
  storageAccountCSMParametersFile:    storageaccountdeploy.parameters.dev.json

  # App Service
  appServiceCSMFilePath:              appservicedeploy.json
  appServiceCSMParametersFile:        appservicedeploy.parameters.dev.json

  # CDN
  cdnProfileName:                     cdnp-webapp-dev-001
  cdnEndpointName:                    cdne-webapp-dev-001
  cdnCSMFilePath:                     cdndeploy.json
  cdnCSMParametersFile:               cdndeploy.parameters.dev.json

  serviceConnection:                  webapp-rg-dev-conn
  subscriptionId:                     00000000-0000-0000-0000-000000000000
  webAppName:                         app-webapp-dev-001

  # Dot Net CLI
  buildConfiguration:                 Debug